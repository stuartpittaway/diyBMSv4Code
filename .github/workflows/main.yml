name: PlatformIO CI

on:
  push:

jobs:
  job_build_modulecode:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
      
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Build code for modules
      run: pio run --project-dir=./ATTINYCellModule --project-conf=./ATTINYCellModule/platformio.ini

    - name: Publish Artifacts 1
      uses: actions/upload-artifact@v2
      with:
        name: DIYBMS-Compiled-Module
        path: |
          ./ATTINYCellModule/.pio/build/V*/*.hex
          ./ATTINYCellModule/.pio/build/V*/*.elf
        if-no-files-found: error


  job_build_controller_esp8266:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
        
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2
      
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
       
    - name: Build code for controller
      run: pio run --project-dir=./ESPController  --environment esp8266_d1mini --project-conf=./ESPController/platformio.ini

    - name: Publish Artifacts 2
      uses: actions/upload-artifact@v2
      with:
        name: DIYBMS-Compiled-Controller-ESP8266
        path: ./ESPController/.pio/build/*/*.bin
        if-no-files-found: error

    - name: Build File System Image for ESP8266
      run: pio run --project-dir=./ESPController --target buildfs --environment esp8266_d1mini

    - name: Publish Artifacts 3
      uses: actions/upload-artifact@v2
      with:
        name: DIYBMS-Compiled-Controller-ESP8266
        path: ./ESPController/.pio/build/*/*.bin
        if-no-files-found: error

  job_zip_code:
    runs-on: ubuntu-latest
    needs: [job_build_modulecode, job_build_controller_esp8266]
    steps:
    - name: Download artifact DIYBMS-Compiled-Controller-ESP8266
      uses: actions/download-artifact@v2
      with:
        name: DIYBMS-Compiled-Controller-ESP8266

    - name: Download artifact DIYBMS-Compiled-Module
      uses: actions/download-artifact@v2
      with:
        name: DIYBMS-Compiled-Module

    - name: Display structure of downloaded files
      run: ls -R
  
    - name: ZIP output for release
      run: |
        zip --junk-paths release.zip ./esp8266_d1mini/diybms_controller_firmware_espressif8266_esp8266_d1mini.bin
        zip --junk-paths release.zip ./esp8266_d1mini/diybms_controller_filesystemimage_espressif8266_esp8266_d1mini.bin
        zip --junk-paths release.zip ./V*/*.hex

    - name: Get current date
      id: date
      run: echo "dt=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

    - name: Display structure of downloaded files
      run: mv release.zip release_${{ env.dt }}.zip

    - name: Create Release Files on MASTER branch only
      id: create_release
      uses: actions/create-release@v1
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: Tag-${{ env.dt }}
        release_name: Release-${{ env.dt }}
        body: |
          Automatically generated release
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      if: github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./release_${{ env.dt }}.zip
        asset_name: Compiled_Firmware_${{ env.dt }}.zip
        asset_content_type: application/zip
